{"id":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","dependencies":[{"name":"/mnt/c/server/html/pwa-submission2/package.json","includedInParent":true,"mtime":1594055417357},{"name":"/mnt/c/server/html/pwa-submission2/node_modules/@apidevtools/json-schema-ref-parser/package.json","includedInParent":true,"mtime":1594055414345},{"name":"@jsdevtools/ono","loc":{"line":3,"column":24},"parent":"/mnt/c/server/html/pwa-submission2/node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","resolved":"/mnt/c/server/html/pwa-submission2/node_modules/@jsdevtools/ono/esm/index.js"},{"name":"./util/url","loc":{"line":4,"column":20},"parent":"/mnt/c/server/html/pwa-submission2/node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","resolved":"/mnt/c/server/html/pwa-submission2/node_modules/@apidevtools/json-schema-ref-parser/lib/util/url.js"},{"name":"./util/plugins","loc":{"line":5,"column":24},"parent":"/mnt/c/server/html/pwa-submission2/node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","resolved":"/mnt/c/server/html/pwa-submission2/node_modules/@apidevtools/json-schema-ref-parser/lib/util/plugins.js"},{"name":"./util/errors","loc":{"line":6,"column":109},"parent":"/mnt/c/server/html/pwa-submission2/node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","resolved":"/mnt/c/server/html/pwa-submission2/node_modules/@apidevtools/json-schema-ref-parser/lib/util/errors.js"},{"name":"buffer","parent":"/mnt/c/server/html/pwa-submission2/node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","resolved":"/mnt/c/server/html/pwa-submission2/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n\"use strict\";\n\nconst { ono } = require(\"@jsdevtools/ono\");\nconst url = require(\"./util/url\");\nconst plugins = require(\"./util/plugins\");\nconst { ResolverError, ParserError, UnmatchedParserError, UnmatchedResolverError, isHandledError } = require(\"./util/errors\");\n\nmodule.exports = parse;\n\n/**\n * Reads and parses the specified file path or URL.\n *\n * @param {string} path - This path MUST already be resolved, since `read` doesn't know the resolution context\n * @param {$Refs} $refs\n * @param {$RefParserOptions} options\n *\n * @returns {Promise}\n * The promise resolves with the parsed file contents, NOT the raw (Buffer) contents.\n */\nasync function parse (path, $refs, options) {\n  // Remove the URL fragment, if any\n  path = url.stripHash(path);\n\n  // Add a new $Ref for this file, even though we don't have the value yet.\n  // This ensures that we don't simultaneously read & parse the same file multiple times\n  let $ref = $refs._add(path);\n\n  // This \"file object\" will be passed to all resolvers and parsers.\n  let file = {\n    url: path,\n    extension: url.getExtension(path),\n  };\n\n  // Read the file and then parse the data\n  try {\n    const resolver = await readFile(file, options, $refs);\n    $ref.pathType = resolver.plugin.name;\n    file.data = resolver.result;\n\n    const parser = await parseFile(file, options, $refs);\n    $ref.value = parser.result;\n\n    return parser.result;\n  }\n  catch (err) {\n    if (isHandledError(err)) {\n      $ref.value = err;\n    }\n\n    throw err;\n  }\n}\n\n/**\n * Reads the given file, using the configured resolver plugins\n *\n * @param {object} file           - An object containing information about the referenced file\n * @param {string} file.url       - The full URL of the referenced file\n * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n * @param {$RefParserOptions} options\n *\n * @returns {Promise}\n * The promise resolves with the raw file contents and the resolver that was used.\n */\nfunction readFile (file, options, $refs) {\n  return new Promise(((resolve, reject) => {\n    // console.log('Reading %s', file.url);\n\n    // Find the resolvers that can read this file\n    let resolvers = plugins.all(options.resolve);\n    resolvers = plugins.filter(resolvers, \"canRead\", file);\n\n    // Run the resolvers, in order, until one of them succeeds\n    plugins.sort(resolvers);\n    plugins.run(resolvers, \"read\", file, $refs)\n      .then(resolve, onError);\n\n    function onError (err) {\n      if (!err && options.continueOnError) {\n        // No resolver could be matched\n        reject(new UnmatchedResolverError(file.url));\n      }\n      else if (!err || !(\"error\" in err)) {\n        // Throw a generic, friendly error.\n        reject(ono.syntax(`Unable to resolve $ref pointer \"${file.url}\"`));\n      }\n      // Throw the original error, if it's one of our own (user-friendly) errors.\n      else if (err.error instanceof ResolverError) {\n        reject(err.error);\n      }\n      else {\n        reject(new ResolverError(err, file.url));\n      }\n    }\n  }));\n}\n\n/**\n * Parses the given file's contents, using the configured parser plugins.\n *\n * @param {object} file           - An object containing information about the referenced file\n * @param {string} file.url       - The full URL of the referenced file\n * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver\n * @param {$RefParserOptions} options\n *\n * @returns {Promise}\n * The promise resolves with the parsed file contents and the parser that was used.\n */\nfunction parseFile (file, options, $refs) {\n  return new Promise(((resolve, reject) => {\n    // console.log('Parsing %s', file.url);\n\n    // Find the parsers that can read this file type.\n    // If none of the parsers are an exact match for this file, then we'll try ALL of them.\n    // This handles situations where the file IS a supported type, just with an unknown extension.\n    let allParsers = plugins.all(options.parse);\n    let filteredParsers = plugins.filter(allParsers, \"canParse\", file);\n    let parsers = filteredParsers.length > 0 ? filteredParsers : allParsers;\n\n    // Run the parsers, in order, until one of them succeeds\n    plugins.sort(parsers);\n    plugins.run(parsers, \"parse\", file, $refs)\n      .then(onParsed, onError);\n\n    function onParsed (parser) {\n      if ((options.continueOnError || !parser.plugin.allowEmpty) && isEmpty(parser.result)) {\n        reject(ono.syntax(`Error parsing \"${file.url}\" as ${parser.plugin.name}. \\nParsed value is empty`));\n      }\n      else {\n        resolve(parser);\n      }\n    }\n\n    function onError (err) {\n      if (!err && options.continueOnError) {\n        // No resolver could be matched\n        reject(new UnmatchedParserError(file.url));\n      }\n      else if (!err || !(\"error\" in err)) {\n        reject(ono.syntax(`Unable to parse ${file.url}`));\n      }\n      else if (err.error instanceof ParserError) {\n        reject(err.error);\n      }\n      else {\n        reject(new ParserError(err.error.message, file.url));\n      }\n    }\n  }));\n}\n\n/**\n * Determines whether the parsed value is \"empty\".\n *\n * @param {*} value\n * @returns {boolean}\n */\nfunction isEmpty (value) {\n  return value === undefined ||\n    (typeof value === \"object\" && Object.keys(value).length === 0) ||\n    (typeof value === \"string\" && value.trim().length === 0) ||\n    (Buffer.isBuffer(value) && value.length === 0);\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}}],"sources":{"../node_modules/@apidevtools/json-schema-ref-parser/lib/parse.js":"\"use strict\";\n\nconst { ono } = require(\"@jsdevtools/ono\");\nconst url = require(\"./util/url\");\nconst plugins = require(\"./util/plugins\");\nconst { ResolverError, ParserError, UnmatchedParserError, UnmatchedResolverError, isHandledError } = require(\"./util/errors\");\n\nmodule.exports = parse;\n\n/**\n * Reads and parses the specified file path or URL.\n *\n * @param {string} path - This path MUST already be resolved, since `read` doesn't know the resolution context\n * @param {$Refs} $refs\n * @param {$RefParserOptions} options\n *\n * @returns {Promise}\n * The promise resolves with the parsed file contents, NOT the raw (Buffer) contents.\n */\nasync function parse (path, $refs, options) {\n  // Remove the URL fragment, if any\n  path = url.stripHash(path);\n\n  // Add a new $Ref for this file, even though we don't have the value yet.\n  // This ensures that we don't simultaneously read & parse the same file multiple times\n  let $ref = $refs._add(path);\n\n  // This \"file object\" will be passed to all resolvers and parsers.\n  let file = {\n    url: path,\n    extension: url.getExtension(path),\n  };\n\n  // Read the file and then parse the data\n  try {\n    const resolver = await readFile(file, options, $refs);\n    $ref.pathType = resolver.plugin.name;\n    file.data = resolver.result;\n\n    const parser = await parseFile(file, options, $refs);\n    $ref.value = parser.result;\n\n    return parser.result;\n  }\n  catch (err) {\n    if (isHandledError(err)) {\n      $ref.value = err;\n    }\n\n    throw err;\n  }\n}\n\n/**\n * Reads the given file, using the configured resolver plugins\n *\n * @param {object} file           - An object containing information about the referenced file\n * @param {string} file.url       - The full URL of the referenced file\n * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n * @param {$RefParserOptions} options\n *\n * @returns {Promise}\n * The promise resolves with the raw file contents and the resolver that was used.\n */\nfunction readFile (file, options, $refs) {\n  return new Promise(((resolve, reject) => {\n    // console.log('Reading %s', file.url);\n\n    // Find the resolvers that can read this file\n    let resolvers = plugins.all(options.resolve);\n    resolvers = plugins.filter(resolvers, \"canRead\", file);\n\n    // Run the resolvers, in order, until one of them succeeds\n    plugins.sort(resolvers);\n    plugins.run(resolvers, \"read\", file, $refs)\n      .then(resolve, onError);\n\n    function onError (err) {\n      if (!err && options.continueOnError) {\n        // No resolver could be matched\n        reject(new UnmatchedResolverError(file.url));\n      }\n      else if (!err || !(\"error\" in err)) {\n        // Throw a generic, friendly error.\n        reject(ono.syntax(`Unable to resolve $ref pointer \"${file.url}\"`));\n      }\n      // Throw the original error, if it's one of our own (user-friendly) errors.\n      else if (err.error instanceof ResolverError) {\n        reject(err.error);\n      }\n      else {\n        reject(new ResolverError(err, file.url));\n      }\n    }\n  }));\n}\n\n/**\n * Parses the given file's contents, using the configured parser plugins.\n *\n * @param {object} file           - An object containing information about the referenced file\n * @param {string} file.url       - The full URL of the referenced file\n * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver\n * @param {$RefParserOptions} options\n *\n * @returns {Promise}\n * The promise resolves with the parsed file contents and the parser that was used.\n */\nfunction parseFile (file, options, $refs) {\n  return new Promise(((resolve, reject) => {\n    // console.log('Parsing %s', file.url);\n\n    // Find the parsers that can read this file type.\n    // If none of the parsers are an exact match for this file, then we'll try ALL of them.\n    // This handles situations where the file IS a supported type, just with an unknown extension.\n    let allParsers = plugins.all(options.parse);\n    let filteredParsers = plugins.filter(allParsers, \"canParse\", file);\n    let parsers = filteredParsers.length > 0 ? filteredParsers : allParsers;\n\n    // Run the parsers, in order, until one of them succeeds\n    plugins.sort(parsers);\n    plugins.run(parsers, \"parse\", file, $refs)\n      .then(onParsed, onError);\n\n    function onParsed (parser) {\n      if ((options.continueOnError || !parser.plugin.allowEmpty) && isEmpty(parser.result)) {\n        reject(ono.syntax(`Error parsing \"${file.url}\" as ${parser.plugin.name}. \\nParsed value is empty`));\n      }\n      else {\n        resolve(parser);\n      }\n    }\n\n    function onError (err) {\n      if (!err && options.continueOnError) {\n        // No resolver could be matched\n        reject(new UnmatchedParserError(file.url));\n      }\n      else if (!err || !(\"error\" in err)) {\n        reject(ono.syntax(`Unable to parse ${file.url}`));\n      }\n      else if (err.error instanceof ParserError) {\n        reject(err.error);\n      }\n      else {\n        reject(new ParserError(err.error.message, file.url));\n      }\n    }\n  }));\n}\n\n/**\n * Determines whether the parsed value is \"empty\".\n *\n * @param {*} value\n * @returns {boolean}\n */\nfunction isEmpty (value) {\n  return value === undefined ||\n    (typeof value === \"object\" && Object.keys(value).length === 0) ||\n    (typeof value === \"string\" && value.trim().length === 0) ||\n    (Buffer.isBuffer(value) && value.length === 0);\n}\n"},"lineCount":166}},"error":null,"hash":"c4aa3252f162f3699d38f25f72f57404","cacheData":{"env":{}}}